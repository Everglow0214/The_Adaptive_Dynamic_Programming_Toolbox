function [data, N, time] = dataGeneModelBased(sys, u0,...
    esym, tsym, q, xInit, tSpan, m, N2, R, opt, odeOpt)
% >> This function generates data of augmented states in
% the model-based working mode.
%
% For more details about augmented states, please refer to
% the function
% >> dX = adpAugSys(t, X, sys, u0, e, q, n, N2, R, opt)
%
% >> [data, N, time] = dataGeneModelBased(sys, u0, esym,
%       tsym, q, xInit, tSpan, m, N2, R, opt, odeOpt)
% ======================== Input =========================
% sys:    system dynamics
%         (function handle)
% u0:     initial admissible control
%         (function handle)
% esym:   exploration signals
%         (function handle)
% tsym:   time
%         (symbolic representation)
% q:      q(x) in the performance index
%         (function handle)
% xInit:  initial state(s)
%         Every initial state is represented by a row
%         vector. If 2 or more initial states are used,
%         then these row vectors are stacked vertically
%         into a matrix.
% tSpan:  time interval(s)
%         Every time interval is represented by a row
%         vector. If 2 or more time intervals are used,
%         then these row vectors are stacked vertically
%         into a matrix.
% m:      control dimension
% N2:     number of basis functions for the approximate
%         optimal control \hat{u}
% R:      matrix R in the performance index
% opt:    type of basis functions
%         This parameter can be 'mono'.
% odeOpt: ODE option(s) for an ODE solver
% ========================================================
% ======================== Output ========================
% data:   generated data (a matrix), based on one or more
%         initial states
% N:      number of data that are generated by each
%         initial state
%         (a scalar or a column vector)
% time:   evaluation points (a column vector)
% ========================================================

data = [];
time = [];
N = [];

% nInit: number of initial states
% n:     state dimension
[nInit, n] = size(xInit);

% Argmented initial states.
%%%%%%%%%%%%%%% With Kronecker product %%%%%%%%%%%%%%%
% XInit = [xInit, zeros(nInit, N2*(N2+2*m)+2)];
%%%%%%%%%%%%%%% With Kronecker product %%%%%%%%%%%%%%%

%%%%%%%%%%%%%%% No Kronecker product %%%%%%%%%%%%%%%
XInit = [xInit, zeros(nInit, N2*(N2/2+0.5+2*m)+2)];
%%%%%%%%%%%%%%% No Kronecker product %%%%%%%%%%%%%%%

for i = 1:nInit
    ei = matlabFunction(esym((i*m-m+1):(i*m)), 'Vars', tsym);
    [t,X] = ode45(@(t,X) adpAugSys(t,X,sys,u0,ei,q,n,N2,R,...
        opt), tSpan(i,:), XInit(i,:), odeOpt);
    data = [data; X];
    time = [time; t];
    N    = [N; numel(t)];
end
end